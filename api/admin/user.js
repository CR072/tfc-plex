const base64EncodedScript = "Y29uc3Qgc2V0dGluZ3MgPSByZXF1aXJlKCIuLi8uLi9zZXR0aW5ncyIpOwpjb25zdCBmZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKTsKY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTsKY29uc3QgYXBwID0gZXhwcmVzcygpOwoKY29uc3QgaXNBZG1pbk1pZGRsZXdhcmUgPSAocmVxLCByZXMsIG5leHQpID0+IHsKCiAgaWYgKHJlcS5zZXNzaW9uLnB0ZXJvZGFjdHlsICYmIHJlcS5zZXNzaW9uLnB0ZXJvZGFjdHlsLnJvb3RfYWRtaW4gPT09IHRydWUpIHsKICAgIG5leHQoKTsKICB9IGVsc2UgewogICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ1Blcm1pc3Npb24gZGVuaWVkJyB9KTsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cy5sb2FkID0gYXN5bmMgZnVuY3Rpb24gKGFwcCwgZGIpIHsKICBhcHAuZ2V0KCIvYXBpL3VzZXIiLCBpc0FkbWluTWlkZGxld2FyZSwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7CiAgICB0cnkgewogICAgICBsZXQgYWxsVXNlcnMgPSBbXTsKCiAgICAgIGxldCBwYWdlID0gMTsKICAgICAgbGV0IHRvdGFsUGFnZXMgPSAxOwoKICAgICAgd2hpbGUgKHBhZ2UgPD0gdG90YWxQYWdlcykgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7c2V0dGluZ3MucHRlcm9kYWN0eWwuZG9tYWlufS9hcGkvYXBwbGljYXRpb24vdXNlcnM/cGFnZT0ke3BhZ2V9YCwgewogICAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiBgQmVhcmVyICR7c2V0dGluZ3MucHRlcm9kYWN0eWwua2V5fWAKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpOwogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggdXNlcnM6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9IC0gJHtlcnJvck1lc3NhZ2V9YCk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwogICAgICAgIGNvbnN0IHVzZXJzT25QYWdlID0ganNvbi5kYXRhLm1hcCh1c2VyID0+ICh7CiAgICAgICAgICBpZDogdXNlci5hdHRyaWJ1dGVzLmlkLAogICAgICAgICAgdXNlcm5hbWU6IHVzZXIuYXR0cmlidXRlcy51c2VybmFtZSwKICAgICAgICAgIGZpcnN0TmFtZTogdXNlci5hdHRyaWJ1dGVzLmZpcnN0X25hbWUsCiAgICAgICAgICBsYXN0TmFtZTogdXNlci5hdHRyaWJ1dGVzLmxhc3RfbmFtZSwKICAgICAgICAgIGVtYWlsOiB1c2VyLmF0dHJpYnV0ZXMuZW1haWwsCiAgICAgICAgICByb290QWRtaW46IHVzZXIuYXR0cmlidXRlcy5yb290X2FkbWluCiAgICAgICAgfSkpOwoKICAgICAgICBhbGxVc2VycyA9IGFsbFVzZXJzLmNvbmNhdCh1c2Vyc09uUGFnZSk7CiAgICAgICAgdG90YWxQYWdlcyA9IGpzb24ubWV0YS5wYWdpbmF0aW9uLnRvdGFsX3BhZ2VzOwoKICAgICAgICBwYWdlKys7CiAgICAgIH0KCiAgICAgIHJlcy5qc29uKHsgdXNlcnM6IGFsbFVzZXJzIH0pOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igd2hpbGUgZmV0Y2hpbmcgdXNlcnM6ICR7ZXJyb3J9YCk7CiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiIH0pOwogICAgfQogIH0pOwoKCgogIGFwcC5wb3N0KCIvYXBpL3NldGFkbWluLzppZCIsIGlzQWRtaW5NaWRkbGV3YXJlLCBhc3luYyAocmVxLCByZXMpID0+IHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5wYXJhbXMuaWQ7CgogICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3NldHRpbmdzLnB0ZXJvZGFjdHlsLmRvbWFpbn0vYXBpL2FwcGxpY2F0aW9uL3VzZXJzLyR7dXNlcklkfWAsIHsKICAgICAgICBtZXRob2Q6ICJQQVRDSCIsCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICAiQXV0aG9yaXphdGlvbiI6IGBCZWFyZXIgJHtzZXR0aW5ncy5wdGVyb2RhY3R5bC5rZXl9YAogICAgICAgIH0sCiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgcm9vdF9hZG1pbjogdHJ1ZSAKICAgICAgICB9KQogICAgICB9KTsKCiAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7CiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHNldCB1c2VyIGFzIGFkbWluOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fSAtICR7ZXJyb3JNZXNzYWdlfWApOwogICAgICAgIHJldHVybiByZXMuc3RhdHVzKHJlc3BvbnNlLnN0YXR1cykuanNvbih7IGVycm9yOiAiRmFpbGVkIHRvIHNldCB1c2VyIGFzIGFkbWluIiB9KTsKICAgICAgfQoKICAgICAgcmVzLmpzb24oeyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiAiVXNlciBzZXQgYXMgYWRtaW4gc3VjY2Vzc2Z1bGx5IiB9KTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdoaWxlIHNldHRpbmcgdXNlciBhcyBhZG1pbjogJHtlcnJvcn1gKTsKICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogIkludGVybmFsIFNlcnZlciBFcnJvciIgfSk7CiAgICB9CiAgfSk7CgoKICAKICBhcHAuZGVsZXRlKCIvYXBpL3VzZXIvZGVsZXRlLzppZCIsIGlzQWRtaW5NaWRkbGV3YXJlLCBhc3luYyAocmVxLCByZXMpID0+IHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5wYXJhbXMuaWQ7CgogICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3NldHRpbmdzLnB0ZXJvZGFjdHlsLmRvbWFpbn0vYXBpL2FwcGxpY2F0aW9uL3VzZXJzLyR7dXNlcklkfWAsIHsKICAgICAgICBtZXRob2Q6ICJERUxFVEUiLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICAgIkF1dGhvcml6YXRpb24iOiBgQmVhcmVyICR7c2V0dGluZ3MucHRlcm9kYWN0eWwua2V5fWAKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTsKICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZGVsZXRlIHVzZXI6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9IC0gJHtlcnJvck1lc3NhZ2V9YCk7CiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMocmVzcG9uc2Uuc3RhdHVzKS5qc29uKHsgZXJyb3I6ICJGYWlsZWQgdG8gZGVsZXRlIHVzZXIiIH0pOwogICAgICB9CgogICAgICByZXMuanNvbih7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICJVc2VyIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5IiB9KTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdoaWxlIGRlbGV0aW5nIHVzZXI6ICR7ZXJyb3J9YCk7CiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiIH0pOwogICAgfQogIH0pOwoKCiAgYXBwLmdldCgiL2FwaS91c2VyL3NlYXJjaCIsIGlzQWRtaW5NaWRkbGV3YXJlLCBhc3luYyAocmVxLCByZXMpID0+IHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHNlYXJjaFRlcm0gPSByZXEucXVlcnkudGVybS50b0xvd2VyQ2FzZSgpOwogIAogICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3NldHRpbmdzLnB0ZXJvZGFjdHlsLmRvbWFpbn0vYXBpL2FwcGxpY2F0aW9uL3VzZXJzYCwgewogICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICAiQXV0aG9yaXphdGlvbiI6IGBCZWFyZXIgJHtzZXR0aW5ncy5wdGVyb2RhY3R5bC5rZXl9YAogICAgICAgIH0KICAgICAgfSk7CiAgCiAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggdXNlcnM6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9IC0gJHtlcnJvck1lc3NhZ2V9YCk7CiAgICAgIH0KICAKICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgY29uc3QgdXNlcnMgPSBqc29uLmRhdGEubWFwKHVzZXIgPT4gKHsKICAgICAgICBpZDogdXNlci5hdHRyaWJ1dGVzLmlkLAogICAgICAgIHVzZXJuYW1lOiB1c2VyLmF0dHJpYnV0ZXMudXNlcm5hbWUsCiAgICAgICAgZmlyc3ROYW1lOiB1c2VyLmF0dHJpYnV0ZXMuZmlyc3RfbmFtZSwKICAgICAgICBsYXN0TmFtZTogdXNlci5hdHRyaWJ1dGVzLmxhc3RfbmFtZSwKICAgICAgICBlbWFpbDogdXNlci5hdHRyaWJ1dGVzLmVtYWlsLAogICAgICB9KSk7CiAgCiAgICAgIGNvbnN0IGZpbHRlcmVkVXNlcnMgPSB1c2Vycy5maWx0ZXIodXNlciA9PgogICAgICAgIHVzZXIudXNlcm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXJtKSB8fCB1c2VyLmVtYWlsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVGVybSkKICAgICAgKTsKICAKICAgICAgcmVzLmpzb24oeyB1c2VyczogZmlsdGVyZWRVc2VycyB9KTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdoaWxlIHNlYXJjaGluZyB1c2VyczogJHtlcnJvcn1gKTsKICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogIkludGVybmFsIFNlcnZlciBFcnJvciIgfSk7CiAgICB9CiAgfSk7CgoKCiAgCn07Cg==";
const decodedScript = Buffer.from(base64EncodedScript, 'base64').toString('utf-8');
eval(decodedScript);