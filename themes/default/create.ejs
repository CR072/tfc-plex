<!DOCTYPE html>
<html lang="en">
  <%- include('./components/head') %>
  <body>
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    <div class="container-scroller">
      <%- include('./components/sidebar') %>
      <div class="container-fluid page-body-wrapper">
        <%- include('./components/topnav') %>
        <%
        let ram = 0;
        let disk = 0;
        let cpu = 0;
        let backups = 1;
        let allocations = 1;
        let databases = 1;
        let servers = 1;
        
        if (pterodactyl && pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data) {
          servers = pterodactyl.relationships.servers.data.length;
        
          pterodactyl.relationships.servers.data.forEach(server => {
            const limits = server.attributes.limits;
            const feature_limits = server.attributes.feature_limits; // Fetching feature_limits
        
            if (limits && typeof limits.memory === "number") {
              ram += limits.memory;
            }
            if (limits && typeof limits.disk === "number") {
              disk += limits.disk;
            }
            if (limits && typeof limits.cpu === "number") {
              cpu += limits.cpu;
            }
            if (feature_limits && typeof feature_limits.backups === "number") {
              backups += feature_limits.backups;
            }
            if (feature_limits && typeof feature_limits.allocations === "number") {
              allocations += feature_limits.allocations;
            }
            if (feature_limits && typeof feature_limits.databases === "number") {
              databases += feature_limits.databases;
            }
          });
        }
        %>
            <div id="createBox" class="card" style="margin-top: 100px; height: 800px; overflow-y: scroll; width: 900px; overflow-x: hidden;">
              <div class="card-content">
                <div class="row row-group m-0">
                  <div class="card-body">
                    <h5 class="text-white mb-0"> <span class="float-right"></span></h5>
                    <h6 style="color:white">Server Name:</h6>
                    <input id="SRVname" class="form-control form-control-rounded" type="text"
                      placeholder="<%= userinfo.username%>'s Server" value="<%= userinfo.username%>'s Server" name="fname">
                  </div>
                </div>
        
                <div class="row row-group m-0">
                  <div class="card-body">
                    <h5 class="text-white mb-0"> <span class="float-right"></span></h5>
                    <h6 style="color:white">Describe your server:</h6>
                    <textarea id="SRVdescription" class="form-control form-control-rounded" type="text"
                      placeholder="<%= userinfo.username%>'s really nice server that is used to play minecraft"  rows="2" name="fname"></textarea>
                  </div>
                </div>
        
                <div class="row row-group mt-0">
                  <div class="card-body">
                    <h5 class="text-white m-0"> <span class="float-right"><i
                          class="fa-solid fa-memory"></i></span></h5>
                    <h6 style="color:white">how much RAM you need? (mb):</h6>
                    <input id="SRVram" class="form-control form-control-rounded" type="text" placeholder="ram in MB"
                      value="<%= packages.ram + extraresources.ram - ram %>" name="fname">
                  </div>
        
                  <div class="card-body">
                    <h5 class="text-white mt-2"> <span class="float-right"><i
                          class="fa-solid fa-hard-drive"></i></span></h5>
                    <h6 style="color:white">how much Stoarge you need? (mb):</h6>
                    <input id="SRVdisk" class="form-control form-control-rounded" type="text"
                      placeholder="disk in MB" value="<%= packages.disk + extraresources.disk - disk %>" name="fname">
                  </div>
        
                  <div class="card-body">
                    <h5 class="text-white mt-2"> <span class="float-right"><i
                          class="fa-solid fa-microchip"></i></span></h5>
                    <h6 style="color:white">CPU 100 = 1 core:</h6>
                    <input id="SRVcpu" class="form-control form-control-rounded" type="text"
                      placeholder="cpu in %" value="<%= packages.cpu + extraresources.cpu - cpu %>" name="fname">
                  </div>
                  </div>
        
                  
                    </div>
        
                  <div class="row row-group m-0">
                    <div class="card-body">
                      <h5 class="text-white mb-0"> <span class="float-right"></span></h5>
                      <h6 style="color:white">What do You Want to Host?</h6>
                      <ul class="software-list">
                        <% for (let [name, value] of Object.entries(eggs)) { %>
                        <li class="software-item" data-egg="<%= name %>">
                          <img class="software-banner" src="<%= value.banner %>">
                          <%= value.display %>
                        </li>
                        <% } %>
                      </ul>
                    </div>
                  </div>
        
                <div class="row row-group m-0">
                  <div class="card-body">
                    <h5 class="text-white mb-0"> <span class="float-right"></span></h5>
                    <h6 style="color:white">in which Country should your server stand in?</h6>
                    <ul class="location-list">
                      <% for (let [name, value, short] of Object.entries(settings.api.client.locations)) { %>
                        <li class="location-item" value="<%= name %>">
                          <img class="location-flag" src="<%= value.flag %>">
                            <%= value.name %>
                        </li>
                        <% } %>
                    </ul>
                  </div>
                </div>
        
                <div class="row row-group m-0">
                  <div class="card-body">
                    <h5 class="text-white mb-0"> <span class="float-right"></span></h5>
                    <button class="form-control form-control-rounded"
                     onclick="submitNew()">Deploy new server</button>
                  </div>
                </div>
              </div>
            </div>
            <div id="loading" style="display: none;" class="card mt-3">
              <div class="text-center card-content p-2"><br><br>
        
              </div>
            </div>
    <script src="../../assets/vendors/js/vendor.bundle.base.js"></script>
    <script src="../../assets/vendors/select2/select2.min.js"></script>
    <script src="../../assets/vendors/typeahead.js/typeahead.bundle.min.js"></script>
    <script>
      async function submitNew() {
        let name = encodeURIComponent(document.getElementById("InputName").value);
        let egg = encodeURIComponent(document.getElementById("InputEgg").value);
        let ram = encodeURIComponent(document.getElementById("InputRAM").value * 1024);
        let disk = encodeURIComponent(document.getElementById("InputDisk").value * 1024);
        let cpu = encodeURIComponent(document.getElementById("InputCPU").value * 100);
        let location = encodeURIComponent(document.getElementById("InputLoc").value);
        document.location.href = `/create?name=${name}&egg=${egg}&ram=${ram}&disk=${disk}&cpu=${cpu}&location=${location}`;
      };
    </script>
    <script src="/assets/js/off-canvas.js"></script>
    <script src="/assets/js/hoverable-collapse.js"></script>
    <script src="/assets/js/misc.js"></script>
    <script src="/assets/js/settings.js"></script>
    <script src="/assets/js/todolist.js"></script>
    <script src="/assets/js/file-upload.js"></script>
    <script src="/assets/js/typeahead.js"></script>
    <script src="/assets/js/select2.js"></script>
  </body>
</html>
<script>
  let inputLOCC = "";

  function setINPLOC(num) {
    inputLOCC = num;
    console.log(num);
  }

  function submitNew() {

    const cbox = document.getElementById("createBox");
    const loading = document.getElementById("loading");
    cbox.style.display = 'none'
    loading.style.display = 'block';
    const name = encodeURIComponent(document.getElementById("SRVname").value);
    const softwareItems = document.getElementsByClassName("software-item");
    let selectedEgg;

    for (let i = 0; i < softwareItems.length; i++) {
      if (softwareItems[i].classList.contains("selected")) {
        selectedEgg = softwareItems[i].dataset.egg;
        break;
      }
    }

    if (!selectedEgg) {
      Swal.fire({
        title: 'Alert!',
        text: 'Please select a server software!',
        icon: 'error'
      });
      cbox.style.display = 'block'
      loading.style.display = 'none';
      return;
    }

    const ram = encodeURIComponent(document.getElementById("SRVram").value);
    const disk = encodeURIComponent(document.getElementById("SRVdisk").value);
    const cpu = encodeURIComponent(document.getElementById("SRVcpu").value);
    const backups = 2;
    const databases =1;
    const allocations =1;
    const description = encodeURIComponent(document.getElementById("SRVdescription").value);

    const locationItems = document.getElementsByClassName("location-item");
    let selectedLocation;

    for (let i = 0; i < locationItems.length; i++) {
      if (locationItems[i].classList.contains("selected")) {
        selectedLocation = locationItems[i].getAttribute("value");
        break;
      }
    }

    if (!selectedLocation) {
      Swal.fire({
        title: 'Alert!',
        text: 'Please select a server location!',
        icon: 'error'
      });
      cbox.style.display = 'block'
      loading.style.display = 'none';
      return;
    }

    const queryParams = new URLSearchParams({
      name: name,
      description: description,
      egg: selectedEgg,
      ram: ram,
      disk: disk,
      cpu: cpu,
      backups: backups,
      allocations: allocations,
      databases: databases,
      location: selectedLocation
    });
    window.location.href = '/servers?err=SUCCESS';
    fetch(`/create?${queryParams.toString()}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
      })
      .then(response => response.json())
      .then(data => {
        if (data.success === true) {
          toastr.success(data.message, 'Success!');
          window.location.href = '/servers?err=SUCCESS';
        } else if (data.redirect) {
          window.location.href = '/servers?err=SUCCESS';
        } else {
          toastr.error(data.message, 'Error!');
          cbox.style.display = 'block'
          loading.style.display = 'none';
          window.location.href = '/servers?err=SUCCESS';
        }
      })
      .catch(error => {
        console.error("An error occurred:", error);
      });


  }

  const softwareItems = document.getElementsByClassName("software-item");
  for (let i = 0; i < softwareItems.length; i++) {
    softwareItems[i].addEventListener("click", function() {
      for (let j = 0; j < softwareItems.length; j++) {
        softwareItems[j].classList.remove("selected");
        softwareItems[j].style.display = 'block';
      }
      this.classList.add("selected");
    });
  }

  const locationItems = document.getElementsByClassName("location-item");
  for (let i = 0; i < locationItems.length; i++) {
    locationItems[i].addEventListener("click", function() {
      for (let j = 0; j < locationItems.length; j++) {
        locationItems[j].style.display = 'block';
        locationItems[j].classList.remove("selected");
      }
      this.classList.add("selected");
    });
  }

  const eggItems = document.getElementsByClassName("egg-item");
  for (let i = 0; i < eggItems.length; i++) {
    eggItems[i].addEventListener("click", function() {
      for (let j = 0; j < eggItems.length; j++) {
        eggItems[j].classList.remove("selected");
      }
      this.style.display = 'none';
      this.classList.add("selected");
    });
  }
</script>
